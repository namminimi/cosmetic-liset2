react
사용자 인터페이스를 만들기 위한
자바스크립트 라이브러리

자바스크립트 대표 라이브러리
리액트, 뷰, 앵귤러

리액트는 virtual DOM
메모리에 가상으로 존재하는 DOM

브라우저DOM보다 훨씬 속도 빠름


리액트 장점
-컴퍼넌트 단위 개발(생상성 향상, 유지보수 용이) /클래스 배웠을때 파일 하나씩 쪼개서 사용해본적 있음
-싱글페이지 어플리케이션(사용자 경험 개선)
-높은 인지도

JSX구문
-닫혀야 하는 태그(태그는 꼭 닫혀야 합니다.)
-하나의 태그로 감싸져 있어야 함.(<></>)
-jsx안에 자바스크립트 값사용은 {}감싼다.
-class지정은 classname속성을 사용
-주석 {/*주석 */}

JSX구문은 if문 사용 불가 삼항연산자 사용

상태 state 
props : 컴포넌트에게 값 전달하기
예시)
<Hello name="green" age="30"/>
props는 object임 {name: "green", age: "30"}
function Hello(props){
	{props.name}
	{props.age}
}

이벤트연결
자바스크립트 이벤트
1)dom.addEventListener("이벤트", function(){})
2)<button onclick="함수이름()"> +1</button>
3)dom.on이벤트명 = function(){
}
ex) button.onclick = function(){}
상태 state - 동적인값

**상태 관리하기
react useState함수!!!!!!
컴포넌트에서 동적인 값을 상태라고 합니다.
리액트에 useState함수를 사용하여 state를 관리합니다.

useState(초기값)
=>배열을 리턴

function useState(state) {
	return array
}

useState(0) => [newstate, setState()]
useState를 하면 배열을 줌 0번째는 상태 1번째는 업데이트해주는 함수

배열, 객체, 구조분해, 화살표함수, 스프레드


==================1/5
리액트 프로젝트 생성하기
npx create-react-app 프로젝트 이름

props
state
이벤트
컴포넌트(함수형, 클래스형) 2가지 있음 요즘엔 함수형이 대세
배열(map, filter) 렌더링하기

jsx
주소 babeljs.io  jxs 를 javascript형태로 변형


=========

<User user= {users[0]} name="a"/>  여기는 컴포넌트  props는 객체
props ={	
	user: {
            	id: 3,
            	username: "재훈",
            	email: "재훈@green.com"
        	},
	name="a"
}

props.user.username
const {user} = props;

=============
HeaderInput
props = {
	inputText:"",
	onChange: f,
	onAddTodo: f
}


App.js 컴포넌트 에서 HeadInput 자식에게 전달함
       HeadInput컴포넌트 

	<HeadInput/> <=== 컴포넌트 조립
            <HeadInput
	inputText={todoState.inputText}
	onChange = {onChange}
	onAddTodo = {onAddTodo}/>
/>
props = { props는 객체다
	inputText:''
	onChange: f,
	onAddTodo: f
}
function inputText(props) {
	const {inputText, onChange, onAddTodo} = props  이거를 props자리에 가져다놓는다
}
밑에 줄로 
function inputText({inputText, onChange, onAddTodo}) {
	
}

=====
컴포넌트 
프로그래밍에 있어서 재사용이 가능한 각각의 독립적인 모듈을 뜻합니다.
컴포넌트 기반 프로그래밍을 하면 마치 레고 블럭차럼 이미 만들어진 컴포넌트들을 조합하여 화면을 구상합니다
웹 컴포넌트는 이러한 컴포넌트 기반 프로그래밍을 웹에서도 적용할 수 있도록 w3c에서 새로 정한 규격이다

두가지 있음
1) 함수형 컴포넌트
- 선언하기가 편리하다
- 메모리 자원을 사용하는 것도 클래스형보다 작다
- 프로젝트 완성후 빌드한 후 배포할 때 결과물의 파일 크기가 더 작다

구문
function FuncComponent(){
	return(
		<div></div>   //jsx
	)
}
화살표 함수
const FuncComponent = () => {
	return (
		<div></div>     //jsx
	)
}

export default FuncComponent;

2)클래스형 컴포넌트
특징
클래스형 컴포넌트는 render()함수가 필수적이며 그 안에 보여주어야할 jsx를
반환해줌  (클래스는 랜더함수안에 리턴있음)
import React, { Component } from "react"
class ClassComponent extends Component {
	render() {
		return(
			<div></div>   //jsx
		)
	}
}

export default ClassComponent;


*클래스형 컴포넌트 state
생성자메소드인 constructor() 메소드를 사용하여 state작성
클래스형 컴포넌트에서 constructor()작성할때 반드시 super(props)를 호출해 주어야한다
super(props)가 호출되면 현재 클래스형 컴포넌트가 상속받고 있는 리액트의 
Component 클래스가 지닌 생성자 함수가 호출됨




=============================================  1/9


*props => propetries(속성들)의 줄임말
컴포넌트의 속성을 설정할때 해당 컴포넌트를 사용하는 부모 컴포넌트에서 설정할수 있음
컴포넌트 태그사이에 내용은 children메소드로 전달

function app() {
	return (
		<funcomponent name="aaa">안녕</funcomponent>
	)
}

state 상태
1) 함수형
useState() 훅함수를 사용
useState(초기값) => return array[상태, 상태업데이트함수]   //배열로 받음
구문)
const [number, setNumber] = useState(0);   //구조분해할당

number = 10 <<< 이 변수값 할당 불가능
setNumber 함수을 사용하여 업데이트 해야한다  ex) setNumber(10)


렌더 => 화면에 그린다
리렌더링  (변수가 바뀔떄는 리렌더링 안한다)  중요중요아주중요
1)부모요소가주는 !!props가 변경!!되었을 때
2)!!상태!!가 변경되었을때

===============================
객체 object
물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서
속성을 가지고 있고 다른 것과 식별 가능 한것
=> 이름(key)과 값(value)으로 구성된 속성(property)의 집합이다
고양이
속성(property)
cat.name="콩이"
cat.family="코리안 숏헤어"
cat.age = 1
cat.weight = 1000

속성의 값이 함수인 속성 -> 메소드(method)
cat.eat()
cat.sleep()
cat.play()

객체리터럴문법
let cat = {};
객체 생성자 문법
let cat = new Object();
let abc = "weight";

let cat = {
	name: "콩이",
	family: "코리안 숏 헤어",
	[abc]: 1000,
}
cat.age = 1;
cat.name
cat['name'']



<script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>


============================================1/10
react style 적용
1) inline styling
html 태그안에 직접 입력하는 방법
style={} json형식(객체)으로 속성명: 속성값으로 입력
속성명 css(-) 커멀케이스 방식을 사용
font-size --->fontSize
<div>
	<h2 style={{color: "red", fontSize: "24px"}}></h2>
</div>

2) javascript object
객체형식으로 컴포넌트 내에 변수를 선언
해당태그에 style ={변수명}
const textStyle = {
	fontSize: "36px",
	color: "pink"
}
<h2 style={textStyle}></h2>
3) css파일 작성
import './style.css'

스타일 객체에 중괄호{{}}

===========
변수 const
상태 state

Ref ref
컴포넌트의 전 생애주기동안 유지됨
컴포넌트가 리렌더링 되어도 언마운트
되기 전까지 유지됨

state가 변경 => 렌더링 발생 => 컴포넌트
내부 변수들 초기화가 됨(Ref값은 유지됨)
Ref가 변경 -> 렌더링x ->변수들의 값 유지


useState() ==> [state.f]
useRef() 
const [text, setText] = useState("초기값")     ==> 배열을 돌려줌
const ref =useRef(value) ===>객체를 돌려줌


setText("hi")

1)Ref생성
useRef(value)훅 함수를 사용하면 {current: value} 객체를 리턴
구문> 
const ref = useRef(value) ==> {current: value}
2)ref값 변경 (접근방법)/수정
ref.current = "green";  ==> {current:"green"}
3) Ref 특징
컴포넌트의 전 생애주기동안 유지됨
컴포넌트가 리렌더링 되어도 언마운트
되기 전까지 유지됨
Ref가 변경 -> 렌더링x ->변수들의 값 유지
4)Ref 용도
-저장공간: 값이 변경되어도 렌더링이 일어나지 않으면 렌더링이 되어도
초기화 되지않고 값이 유지되는 저장공간
-DOM요소의 접근 : document.querySelector() 같은 역활을 해줌
const nameInput = useRef();
<input ref={nameInput}/>



렌더링이 된다는건 생성된다는말


useEffect
마운트 : 나타남
업데이트: 다시 렌더링
언마운트: 사라짐

useEffect를 사용하여
마운트/언마운트/업데이트 시 실행할 작업 설정하기
이 함수를 사용하면 처음화면이 나타날때 특정 작업을 할 수 있음
리렌더링 될때마다 특정 작업도 할 수 있음

1)useEffect 구문
useEffect(콜백함수)
*렌더링 될때 마다 실행
ex)useEffect(()=>{
	//실행할 코드
})
*화면에 첫 렌더링 될때 실행 + value값이 변경될때만 실행
ex) useEffect(()=>{
	//실행할 코드
},[value])
*화면에 첫 렌더링 될때만 실행
ex) useEffect(()=>{
	//실행할 코드
},[])

*마운트됐을때 실행, 언마운트됐을때 실행
useEffect(()=>{
	//마운트 됐을때 실행코드
	return()=>{
	//언마운트 됐을때 실행
	}	
},[])


==================================1/11

useState --> 상태 관리
useState("초기값") ===> [state, f()] 상태, 업데이트함수
useEffect() ==> 마운트, 언마운트,업데이트(리렌더링)될때
실행코드를 작성

마운트, 업데이트 콜백함수 호출
useEffect(콜백함수,[])

마운트될때와 name상태값이 변경될때만 호출
useEffect(콜백함수,[name])

마운트될때 호출, 언마운트 될때 클린업 호출
useEffect(()=>{
	//마운트될때 실행문
	return() =>{
	//언마운트 됐을때 실행
	}

}

useRef
컴포넌트의 전 생애주기동안 유지됨
Ref값이 변경되어도 리렌더링 되지않음

용도
1)저장공간
const count = useRef(10) ----->객체리턴{current: 10}
count.current = count.current + 1;

2)DOM요소 접근
const inputName = useRef();

자바스크립트 접근방법 = document.querySelector('#inputname').focus();
ref => 접근방법 inputName.current.focus();
<input ref={inputName} id="inputname"/>


=========

ContextAPI
어떤 컴포넌트 트리내에서 최상위 컴포넌트부터 최말단 컴포넌트에 걸쳐 전역으로 관리해야할 데이터를 관리
(props처럼 위에서 아래로 하나하나 전달안해도되고 어디로든 전달 가능)
1)context 생성
-context : 전역데이터를 담고있는 저장공간
createContext(초기값) 함수호출

2)context 사용
useContext(context)

===========

자바스크립트 모듈 내보내기 가져오기
1. export 내보내기
1)복수의 함수가 있는 라이브러리 형태
-export{}


2)개체하나만 선언되어있는 모듈
*export default 개체 하나만 선언된 모듈
(export default 앞에 붙여도됨,함수형이나 class)function Header(){
	const addUser = () => {}
	return(
		<div></div>
	)
}
export default Header

2. import 가져오기

==========
scss 설치 npm install node-sass@8
제거 npm uninstall node-sass


styled-component설치
https://styled-components.com/docs/basics#installation

====================================================1/12
const aa = "green"
"나는 오늘 " + aa + "에간다" //"나는 오늘 green에 간다"
문자열+문자열+문자열 는 결합연산자다

템플릿리터럴
`나는 오늘 ${aa}에 간다`

polished (우아한)

npm install polished 설치

https://polished.js.org/ 사용법


const props = {
	title: "정말로 삭제하시겠습니까?",
	confirmText: "삭제",
	cancelText="취소",
	children: "데이터를 정말로 삭제하시겠습니까?"
}

const Dialog = ({title, confirmText, cancelText, children }) => {
	return(
		<DarkBackground>
                		<DialogBlock>
                    			<h3>{title}</h3>
                    			<p>{children}</p>
                		</DialogBlock>
            	</DarkBackground>
	)
}

삭제버튼 클릭하면 visible ==> true
diaLog 아래쪽 버튼 두개중
아무거나 클릭하면 visible --> false
visible = true || false
localVisible = true
animate = false

animate 가 false이고
localVisible 이 false일때
Dialog사라짐


===================
useMemo, useCallback
리액트 성능 최적화

함수형 컴포넌트 -->함수
jsx를 반환하는 함수
컴포넌트가 렌더링 되는것은 그 컴포넌트 함수를 호출해서 실행되는 것을 말함
함수가 실행 될 때 함수 내부에 선언된 표현식(변수, 다른 함수)도
다시 선언되어 사용됩니다.
컴포넌트는 자신의 state가 변경되거나 부모에게서 받는 props가
변경될 때 마다 리렌더링 됩니다

state1, state2, state3
state1을 변경
state2, state3

useMemo 란?  함수니깐 여기에 정의된 변수도 다시 리렌더링 (재사용 가능)
useMemo Memo ------> memoization 을 뜻함
동일한 값을 리턴하는 함수를 반복적으로 호출해야한다면 처음 값을
계산할때 그 값을 메모리 저장해서 필요할때만 계산하지 않고 메모리에서 
꺼내서 재사용하는 기법
자주 필요한 값을 처음 계산할때 캐시에 저장을 해두어 값이 **필요할때마다 
계산하지 않고 캐시에서 꺼내서 재사용
//useMemo는 변수의 값을 저장했다가 연관된값이 아니면 호출하지 않음(내 생각)

구문)  *deps --->의존성 배열 depandence array
useMemo(()=>{
	return value;
},[deps])

function calculate(value){
	return value+1;
}

function FunComponent({value, text}){  
	const number = calculate(value);
	return(
		<div>
			{number}
			{text}
		</div>
	)
}
const number = calculater()


원시(Primitive)타입 
Number, String, Boolean, Null, undefined, BigInt

const number =20
const number2 = 20
number === number2   true

객체(Object)타입 참조형 
원시타입을 제외한 모든것

const objnumber = {
	number:20
}

const objnumber2 = {
	number:20
}

objnumber === objnumber2
false (객체가 만들어진 메모리 주소 번지가 다름)

-====================1/13
useMemo ===> 결과값을 재사용
구문>
useMemo(()=>{
	return (num)=>;
},[deps])
useCallback ===> 특정함수를 재사용
useCallback ((num)=>{
	return num+1;	
},[deps])

useMemo(()=>fn,[deps]) 값을 메모리에
useCallback(fn,[deps])  함수자체를 메모리에 저장함

useMemo는 함수를 반환하지 않고, 함수의 값만 
memoization(저장)해서 반환하고 useCallback는 함수 자체를 memoization해서 반환함


이때까지 useState()상태관리했음
const [number, setNumber] = useState()
useReducer() 새로운 상태관리
*useState 는 설정하고 싶은 상태를 직접 설정하고 지정해서 상태를 업데이트함
*useReducer는 액션 객체를 기반으로 상태를 업데이트함
Dispatch   액션   reducer              state
사람        ->      은행       ->       상태
             요청     호출       요청     호출

dispatch를 호출하면 reducer 나온다~~~~
action은 가지고있는 객체 전달
reducer 는 state 업데이트

복잡한건 useReducer   간단한건 useState

Dispatch(Action) =========> Reducer(state, Action)

const [number, setNumber] = useState(초기값)  ====> return [state, f]  배열 리턴
const [number, dispatch] = useReducer(reducer함수, 초기값)  
 ====> return [state, dispatch f] 배열 리턴
dispatch({})



todolist 실습
action.type 지정
할일 추가하기 addTodo
input값 변경 changeInput
할일 삭제 deleteTodo
isDone반전 toggleDoto
요청
할일 추가해죠~ addTodo  -- {type: "addTodo"}
input상태값 변경해죠~ changeInput {type: "changeInput"}
할일 항목하나 삭제해죠~ deleteTodo {type: "deleteTodo"}
할일 항목의 isDone반전시켜줘~ toggleTodo {type: "toggleTodo"}
reducer
reducer


==============================1/16
context 생성
context 값으로 dispatch
props로 전달하지 않고 context사용으로 변경

                    props
부모 컴포넌트 =======> 자식컴포넌트

          props             props          props
부모 ======>자식 ======>자식 ======>자식
useContext API
<UserContex.provider value = "aa">
부모
</UserContex.provider>

const text = useContext(UserContex)
 value(aa)값이 담김


 ==================
react Icons

https://react-icons.github.io/react-icons/


========
API 요청 메소드
GET: 데이터 조회
POST: 데이터 등록
PUT: 데이터 수정
DELETE: 데이터 제거

axios 사용법
import axios from 'axios';

axios.get('/users/1')
axios.post('경로', {username: "green", id: "aa"})

==상태관리

useState, useEffect로 데이터 로딩하기
상태관리
1.요청의 결과 - null
2. 로딩상태 - false
3. 에러 - null

로딩 상태가 true면 로딩중 화면을 보여줌
에러가 null이 아니면 에러가 발생했습니다 화면을 나타냄
결과값이 없으면 null을 보여줌

로딩이 false이고 에러가 null이고 결과값이 null이 아닐때
받아온 데이터를 화면에 나타냄


=====================================1/17
try{}
catch(){}

에러 생성하기
에러 객체 생성자
1) Error 구문 new Error(message)
2) SyntaxError 구문 SyntaxError(message)
3) ReferenceError 구문 new ReferenceError(message)
4) TypeError 구문 new TypeError(message)

*throw 연산자
throw연산자는 에러를 발생(던짐)
구문 throw <error object>


try...catch...finally
try {
	코드실행
}
catch(e) {
	에러핸들링
}
finally {
	항상실행
}
1)try{}안에 코드를 실행
2)에러가 없다면 try안에 마지막 줄까지 실행되고 catch블록은 건너뜀
3)에러가 있으면 try안에 코드가 중단되고 catch(err) 블록으로 제어 흐름이 넘어감
에러가 없는경우 : try실행후 실행
에러가 있는 경우: catch실행 후 실행

====================================1/18
1) TodoContext
const 컨텍스트이름 = createContext("green")
useContext(컨텍스트 이름)


리듀서
1)상태값 지정
2) 리듀서 구현
3) 상태와 디스패치 생성


컴포넌트
TodoHeader.js  //할일이 몇개있는지 나타냄
TodoCreate.js // 추가해주는 일
TodoItem.js  // 그걸 뿌려주는 일



상태관리
1) useState(초기값) ----->[state, setState]
setState(변경되는 값)
2) useReducer(리듀서함수, 상태초기값)
------->[state, dispatch]
dispatch({액션객체})상태업데이트
dispatch ({
	type: 'TOGGLETTODO'
})

function reducer(state, action) {
	switch(action.type){
		case "입금":
		return state + action.금액;
		case "출금":
		return state-action.금액;
		default:
		return state;
	}
}

const [state, dispatch] = useReducer(reducer, 10000);
dispatch({
	type: "입금",
	금액: 20000
})
dispatch({
	type: "출금",
	금액: 10000
})



자식 컴포넌트 값전달
1)props
부모 컴포넌트 ----> 자식 컴포넌트
{
	name: "green",
	children: "안녕하세요"
}

function List(props){
const {name, children} = props;
}

function List({name, children}){

}

2)contextAPI
export const UserContext = createContext("green")
const text = useContext(UserContext)
<UserContext.Provider value ={"blue"}>
	<App/>
</UserContext.Provider>
서버에서 데이터를 요청하여 결과를 리턴해주는 훅함수
useAsn()  --------> [state, dispatchUsers]
useReducer
{
loading:
data:
error:
}

context + reducer
return
<TodoStateContext.Provider value = {state}>
	<TodoDispatchContext.provider value ={dispatch}>
		<TodoNextIdContext.Provider value={ref}>
			{children}
		</TodoNextIdContext.Provider>
	</TodoDispatchContext.provider>
</TodoStateContext.Provider>

==========================

리액트 라우터
각각의 url에 따라 선택된 데이터를 하나의 페이지에서
렌더링해주는 라이브러리
spa에서 새로운 페이지를 로드하지 않고 하나의 페이지안에서
필요한 컴포넌트만 가져와서 다른 페이지를 나타내는 방식을 지원

*라우팅: 사용자가 요청한 url에 따라 해당 url에 맞게
페이지를 보여주는 것
이전 mpa새로운페이지를 로드하며 페이지를 이동하는 방식
<a herf="sub.html"> 서브페이지</a>

1) 라우터 설치하기
npm install react-router-dom

2) 라우터 사용하기
1.상위 컴포넌트에서 라우터를 적용 --> <BrowserRouter>컴포넌트
ex>
<BrowserRouter>
	<App></App>
</BrowerRouter>

2.경로에 따라 보여질 component를 설정 <Routes><Route>컴포넌트
Routes컴포넌트는 여러 Route를 감싸서 그 중 url이 일치하는 라우트 단 하나만ㄴ 렌더링 시켜줌

Route는 path속성에 경로, element속성에 컴포넌트를 지정
ex>
<Routes>
	<Route path="경로" element={<component/>}/>
	<Route path="경로" element={<component/>}/>
</Routes>
localhost: 3000/product
<Routes>
	<Route path="/" element={<Main/>}/>
	<Route path="/product" element={<Product/>}/>
</Routes>


////////////////////////

url 파라미터와 쿼리 스트링
페이지 주소를 정의할때 가끔 변화는 유동적인 값을 사용해야 할때도 있음.
1) URL파라미터 예시
/product/item1
useParams();  ----------> 객체리턴
{

}

2)쿼리스트링 예시
/product?item=1&keyword=react

useLocation() ----> 객체 리턴
{
	item: 1,
	keyword: "react"
}

중첩된 라우트
app --> subpage ----> subpage1
	          ----> subpage2
                      ----> subpage3	


useNavigate()
Link컴포넌트를 사용하지 않고 다른페이지로 이동을 해야할 때
사용하는 Hook
const navigate =useNavigate();
이전페이지로 이동
navigate(-1) 
경로로 이동
navigate('/product')

<NavLink>컴퍼넌트는 링크에서 사용하는 경로가 현재 라우트의 경로와 일치하는 경우
특정 스타일 또는 css클래스를 적용하는 컴포넌트이다

<NavLink>컴포넌트 사용할때 style 또는 className을 설정할 때 
{isActive: boolean}을 파라미터로 전달받는 함수 타입의 값을 전달함
ex)
const activeStyle = {
	backgroundColor: 'pink',
	fontSize: 24
}
<NavLink style = {({isActive})} => isActive ? activeStyle : undefined}
<NavLink className = {({isActive})} => isActive ? "active" : undefined}


NotFound 페이지 만들기
미리 정의되지 않는 경로에 사용자가 진입했을때 보여지는 페이지
페이지를 찾을수 없을 때 나타는 페이지.

<Route path = "*" element = {<NotFound/>}/>



====

모듈 로딩

es 6 방식
export function hello(){

}

import hello from './hello.js'
common js 방식
function hello(){

}

module.export =hello;
const hello = require('/hello.js')